pipeline {
    agent any
    stages {
        stage('Webhook Trigger Check') {   // ðŸ”¥ ì¶”ê°€
            steps {
                echo "âœ… Webhook triggered Jenkins pipeline successfully!"
                echo "BRANCH_NAME: ${env.BRANCH_NAME}"
                echo "gitlabTargetBranch: ${env.gitlabTargetBranch}"
            }
        }

        stage('Check Branch') {
            steps {
                script {
                    def targetBranch = env.gitlabTargetBranch ?: env.BRANCH_NAME
                    if (targetBranch != null && targetBranch != 'dev-be') {
                        currentBuild.result = 'ABORTED'
                        error("This pipeline only runs for merge requests to dev-be branch")
                    }
                }
            }
        }

        stage('CheckOut') {
            steps {
                echo 'Start CheckOut project...'
                git branch: 'dev-be',
                    credentialsId: 'account',
                    url: 'https://lab.ssafy.com/s12-final/S12P31D101.git'
                sh '''
                    pwd
                    ls -R
                '''
                echo 'CheckOut finished!'
            }
        }

        stage('Build') {
            steps {
                echo 'Start building project...'
                dir('backend') {
                    sh '''
                        pwd
                        ls -R
                    '''
                }
                echo 'Build finished!'
            }
        }

        stage('Deploy') {
            steps {
                script {
                    dir('infra') {
                        sh "docker compose down || true"
                        sh "docker compose build --no-cache"
                        sh "docker compose up -d"
                        echo 'Deploy finished!'
                    }
                }
            }
        }
    }
    post {
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
            dir('infra') {
                sh 'docker compose logs'
            }
        }
        always {
            echo 'Cleaning up workspace'
            cleanWs()
        }
    }
}
