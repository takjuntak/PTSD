pipeline {
    agent any
    environment {
        DEPLOY_ENV = credentials('DEPLOY_ENV') // .env.prod ÌôòÍ≤ΩÎ≥ÄÏàò ÌååÏùº (FastAPIÏö©)
    }
    stages {
        stage('Check Branch') {
            steps {
                script {
                    def targetBranch = env.gitlabTargetBranch ?: env.BRANCH_NAME
                    if (targetBranch != null && targetBranch != 'dev-be') {
                        currentBuild.result = 'ABORTED'
                        error("This pipeline only runs for merge requests to dev-be branch")
                    }
                }
            }
        }
        stage('CheckOut') {
            steps {
                echo 'üì¶ Cloning PTSD project...'
                git branch: 'dev-be',
                    credentialsId: 'account',
                    url: 'https://lab.ssafy.com/s12-final/S12P31D101.git'

                sh 'ls -R'
                echo '‚úÖ CheckOut finished!'
            }
        }
        stage('Build') {
            steps {
                echo 'üèóÔ∏è Start building PTSD project...'
                dir('backend') {
                    withCredentials([file(credentialsId: 'DEPLOY_ENV', variable: 'ENV_FILE')]) {
                        sh '''
                            cp "$ENV_FILE" .env.prod
                            cat .env.prod
                        '''
                    }
                }
                echo '‚úÖ Build stage finished!'
            }
        }
        stage('Deploy') {
            steps {
                script {
                    dir('infra') {
                        withCredentials([file(credentialsId: 'DEPLOY_ENV', variable: 'ENV_FILE')]) {
                            sh '''
                                cp "$ENV_FILE" backend/.env
                                chmod 600 backend/.env
                            '''
                        }
                        sh 'docker compose down || true'
                        sh 'docker compose build --no-cache'
                        sh 'docker compose up -d'

                        sh 'sleep 20'
                        echo 'üöÄ Deploy finished!'
                    }
                }
            }
        }
    }
    post {
        success {
            echo '‚úÖ Pipeline succeeded!'
        }
        failure {
            echo '‚ùå Pipeline failed! Logs below:'
            dir('infra') {
                sh 'docker compose logs'
            }
        }
        always {
            echo 'üßπ Cleaning up workspace'
            cleanWs()
        }
    }
}
